pacman::p_load(Biobase)
pacman::p_load(SummarizedExperiment)
pacman::p_load(Rsamtools)
pacman::p_load(GenomicFeatures)
pacman::p_load(GenomicAlignments)
pacman::p_load(edgeR)
load('../data/PRJNA601724.rda') # Una vez instalado, cambiar a "data('PRJNA601724', package = 'franciscomartinez')"
se = PRJNA601724
# dim(se)
# assay(se) # Matriz de conteos
# colData(se) # Datos fenotípicos
# rownames(se) # Nombre de los genes
# rowRanges(se) # Información sobre la secuenciación (sobre las reads)
# rowData(se)
x = apply(assay(se),1,sum)
summary(x)
sum(x == 0) # 23.200 genes no tienen ninguna lectura.
se0 = se[which(x > 0),] # Se quitan aquellas que en el total de las 9 muestras tienen 0 reads
dim(se[which(x > 0),]) # Nos quedamos con 23.548 genes
se0
dim(se[which(x > 0),]) # Nos quedamos con 23.548 genes
se0
# dim(se)
# assay(se) # Matriz de conteos
colData(se) # Datos fenotípicos
# dim(se)
# assay(se) # Matriz de conteos
# colData(se) # Datos fenotípicos
rownames(se) # Nombre de los genes
# dim(se)
# assay(se) # Matriz de conteos
# colData(se) # Datos fenotípicos
# rownames(se) # Nombre de los genes
# rowRanges(se) # Información sobre la secuenciación (sobre las reads)
rowData(se)
colData(se)
colData(se0)
colData(se0)['Treatment']
colData(se0)['Treatment']
data(PRJNA297798, package='tamidata')
colData(PRJNA297798)[,"treatment"] # equivalente a pData(). Datos fenotípicos.
table(colData(PRJNA297798)[,"treatment"]) # Una forma de hacerlo
count(colData(PRJNA297798)[,"treatment"] == "daf-2(e1370); daf-16(mu86); Punc-119::gfp--sorted neurons")
count(colData(PRJNA297798)[,"treatment"] == "N2; Pmec-4::GFP--sorted mechanosensory neurons")
# Una forma de seleccionar los datos:
daf2 = c("SRR2969246","SRR2969245","SRR2969244","SRR2969243","SRR2969241","SRR2969240")
N2 = c("SRR2969235","SRR2979476","SRR2969234","SRR2979475","SRR2969233","SRR2979473")
# Otra forma (mejor) de seleccionar los datos:
cond1 = colData(PRJNA297798)[,"treatment"] == "daf-2(e1370); daf-16(mu86); Punc-119::gfp--sorted neurons"
cond2 = colData(PRJNA297798)[,"treatment"] == "N2; Pmec-4::GFP--sorted mechanosensory neurons"
sel = colData(PRJNA297798)[,"treatment"] == "daf-2(e1370); daf-16(mu86); Punc-119::gfp--sorted neurons" |
colData(PRJNA297798)[,"treatment"] == "N2; Pmec-4::GFP--sorted mechanosensory neurons"
sel = which(sel)
sel
# 1. E.coli - Chryseobacterium:
sel1 = colData(PRJNA297798)[,"Treatment"] == "E.coli" |
colData(PRJNA297798)[,"Treatment"] == "Chryseobacterium"
colData(se0)['Treatment']
# 1. E.coli - Chryseobacterium:
sel1 = colData(PRJNA601724)[,"Treatment"] == "E.coli" |
colData(PRJNA601724)[,"Treatment"] == "Chryseobacterium"
sel1
sel1 = colData(PRJNA601724)[,"Treatment"] == "E.coli" |
colData(PRJNA601724)[,"Treatment"] == "Chryseobacterium"
sel1 = which(sel1)
selº
sel1
colData(se0)['Treatment']
sel1
sel1 = colData(PRJNA601724)[,"Treatment"] == "E.coli" |
colData(PRJNA601724)[,"Treatment"] == "Chryseobacterium"
sel1 = which(sel1)
dge1 = DGEList(counts = assay(PRJNA601724)[,sel1],
group = colData(PRJNA601724)[sel1,"Treatment"])
dge1c =  estimateCommonDisp(dge1)
dge1c$common.dispersion # 2.392732
dge1c =  estimateCommonDisp(dge1) # Asumimos dispersión común para todos los genes
dge1t = estimateTagwiseDisp(dge1c) # Asumimos una dispersión distinta para cada gen.
dge1t$table
dge1c$counts
dge1c$common.dispersion # Parámetro phi, dispersión común
dge1t$tagwise.dispersion # 0.1519314
dge1c = exactTest(dge1c)
dge1t = exactTest(dge1t)
sel1 = colData(PRJNA601724)[,"Treatment"] == "E.coli" |
colData(PRJNA601724)[,"Treatment"] == "Chryseobacterium"
sel1 = which(sel1)
dge1 = DGEList(counts = assay(PRJNA601724)[,sel1],
group = colData(PRJNA601724)[sel1,"Treatment"])
dge1c =  estimateCommonDisp(dge1) # Asumimos dispersión común para todos los genes
dge1t = estimateTagwiseDisp(dge1c) # Asumimos una dispersión distinta para cada gen.
dge1c$common.dispersion # 0.1519314
dge1t = estimateTagwiseDisp(dge1c) # Asumimos una dispersión distinta para cada gen.
dge1t$tagwise.dispersion # Para cada gen
dge1cET = exactTest(dge1c)
dge1tET = exactTest(dge1t)
topTags(dge1cET)
topTags(dge1tET)
dge1tET$table
p.values1 = dge1tET$table[,'Pvalue']
p.values1 = dge1tET$table[,"PValue"]
p.values1.BH = p.adjust(p.values1, "BH")
table(p.values1.BH < 0.001) # 1060
topTags(dge1tET) # Nos centraremos en este.
p.values1 = dge1tET$table[,"PValue"]
p.values1.BH = p.adjust(p.values1, "BH")
topTags(dge1tET) # Nos centraremos en este.
out1 = topTags(dge1tET) # Nos centraremos en este.
out1
class(out1)
p.values1.BH
data.frame(out1,p.values1.BH)
out1
gene = topTags(dge1tET)[,1]
gene
out1
rownames(out1)
out1 = topTags(dge1tET, n = nrow(assay(se0)))
rownames(out1)
nrow(se0)
se0
out1
sel1 = colData(PRJNA601724)[,"Treatment"] == "E.coli" |
colData(PRJNA601724)[,"Treatment"] == "Chryseobacterium"
sel1 = which(sel1)
dge1 = DGEList(counts = assay(PRJNA601724)[,sel1],
group = colData(PRJNA601724)[sel1,"Treatment"])
dge1c =  estimateCommonDisp(dge1) # Asumimos dispersión común para todos los genes
dge1c$common.dispersion # 0.1519314
dge1t = estimateTagwiseDisp(dge1c) # Asumimos una dispersión distinta para cada gen.
dge1t$tagwise.dispersion # Para cada gen
dge1cET = exactTest(dge1c)
dge1tET = exactTest(dge1t)
topTags(dge1cET)
topTags(dge1tET) # Nos centraremos en este.
out1 = topTags(dge1tET, n = nrow(assay(se0)))
p.values1 = out1$table[,"PValue"]
p.values1.BH = p.adjust(p.values1, "BH")
p.values1.BH
prueba = data.frame(GENE = rownames(out1), P.VALUE = out1[,'PValue'], P.BH = p.values1.BH)
prueba
getURL_WBCgene = function(id)
getURL_WBCgene(WBGene00021002)
getURL_WBCgene(WBGene00021002)
nose=getURL_WBCgene(WBGene00021002)
nose
nose=getURL_WBCgene("WBGene00021002")
nose
nose=getURL_WBCgene(patata)
nose
wormID_URL = apply(rownames(out1), 1, getURL_WBCgene)
prueba
wormID_URL = apply(prueba[,'GENE'], 1, getURL_WBCgene)
wormID_URL = apply(prueba['GENE'], 1, getURL_WBCgene)
getURL_WBCgene = function(id)
wormID_URL = apply(prueba['GENE'], 1, getURL_WBCgene)
wormID_URL
wormID_URL = apply(prueba['GENE'], 1, getURL_WBCgene)
prueba
class(prueba)
prueba
getURL_WBCgene("WBGene00014063")
getURL_ensembl = function(id)
getURL_ensembl("patata")
getURL_ensembl("eo")
patata
patata = "Eo"
patata
getURL_ensembl(patata)
View(getURL_ensembl)
getURL_ensembl <- function(id)
getURL_WBCgene <- function(id)
getURL_WBCgene <- function(id){
ifelse(id == "NA",NA,
paste("<a href='http://www.wormbase.org/species/c_elegans/gene/",
id,"'>",id,"</a>",sep=""))}
View(getURL_WBCgene)
wormID = rownames(out1) # Cogemos los ID de los genes y creamos el link a la URL.
wormID
final1 = data.frame(gene = wormID, p.value = out1[,'PValue'], p.bh = p.values1.BH, wbc = WBC_URL)
WBC_URL = apply(wormID, 1, getURL_WBC)
WBC_URL <- function(id){
ifelse(id == "NA",NA, paste("<a href='http://www.wormbase.org/species/c_elegans/gene/", id,"'>",id,"</a>",sep=""))
}
WBC_URL = apply(wormID, 1, getURL_WBC)
getURL_WBC <- function(id){
ifelse(id == "NA",NA, paste("<a href='http://www.wormbase.org/species/c_elegans/gene/", id,"'>",id,"</a>",sep=""))
}
WBC_URL = apply(wormID, 1, getURL_WBC)
View(getURL_WBC)
wormID
class(wormID)
WBC_URL = lapply(wormID, getURL_WBC)
WBC_URL
final1 = data.frame(gene = wormID, p.value = out1[,'PValue'], p.bh = p.values1.BH, wbc = WBC_URL)
head(final1)
wormID
final1 = data.frame(GENE = wormID, P.VALUE = out1[,'PValue'], p.BH = p.values1.BH, WBC = WBC_URL)
columns = c('gene', 'p.value', 'p.bh', 'wbc')
colnames(final1) = columns
head(final1)
WBC_URL = sapply(wormID, getURL_WBC)
final1 = data.frame(GENE = wormID, P.VALUE = out1[,'PValue'], p.BH = p.values1.BH, WBC = WBC_URL)
columns = c('gene', 'p.value', 'p.bh', 'wbc')
colnames(final1) = columns
head(final1)
final1
sel2 = colData(PRJNA601724)[,"Treatment"] == "E.coli" |
colData(PRJNA601724)[,"Treatment"] == "Comamonas"
sel2 = which(sel2)
dge2 = DGEList(counts = assay(PRJNA601724)[,sel2],
group = colData(PRJNA601724)[sel2,"Treatment"])
dge2c =  estimateCommonDisp(dge2) # Asumimos dispersión común para todos los genes
dge2c$common.dispersion # 0.1519314
r
dge2t = estimateTagwiseDisp(dge2c) # Asumimos una dispersión distinta para cada gen.
dge2t$tagwise.dispersion # Para cada gen
dge2cET = exactTest(dge2c)
dge2cET = exactTest(dge2c)
dge2tET = exactTest(dge2t)
topTags(dge2cET)
topTags(dge2tET) # Nos centraremos en este.
out2 = topTags(dge2tET, n = nrow(assay(se0)))
p.values2 = out2$table[,"PValue"]
p.values2.BH = p.adjust(p.values2, "BH")
wormID = rownames(out2) # Cogemos los ID de los genes y creamos el link a la URL.
WBC_URL = sapply(wormID, getURL_WBC)
final2 = data.frame(GENE = wormID, P.VALUE = out2[,'PValue'], p.BH = p.values2.BH, WBC = WBC_URL)
columns = c('gene', 'p.value', 'p.bh', 'wbc')
colnames(final2) = columns
final2
sel3 = colData(PRJNA601724)[,"Treatment"] == "Chryseobacterium" |
colData(PRJNA601724)[,"Treatment"] == "Comamonas"
sel3 = which(sel3)
dge3 = DGEList(counts = assay(PRJNA601724)[,sel3],
group = colData(PRJNA601724)[sel3,"Treatment"])
dge3c =  estimateCommonDisp(dge3) # Asumimos dispersión común para todos los genes
dge3c$common.dispersion # 0.1519314
dge3t = estimateTagwiseDisp(dge3c) # Asumimos una dispersión distinta para cada gen.
dge3t$tagwise.dispersion # Para cada gen
dge3cET = exactTest(dge3c)
dge3tET = exactTest(dge3t)
topTags(dge3cET)
topTags(dge3tET) # Nos centraremos en este.
out3 = topTags(dge3tET, n = nrow(assay(se0)))
p.values3 = out3$table[,"PValue"]
p.values3 = out3$table[,"PValue"]
p.values3.BH = p.adjust(p.values3, "BH")
wormID = rownames(out3) # Cogemos los ID de los genes y creamos el link a la URL.
WBC_URL = sapply(wormID, getURL_WBC)
final3 = data.frame(GENE = wormID, P.VALUE = out3[,'PValue'], p.BH = p.values3.BH, WBC = WBC_URL)
columns = c('gene', 'p.value', 'p.bh', 'wbc')
colnames(final3) = columns
final3
foutput1 = 'PRJNA601724_Ecoli_Chryseo.report'
htmlRep1 = HTMLReport(shortName = foutput, title = foutput, reportDirectory = './reports')
pacman::p_load(Biobase)
pacman::p_load(SummarizedExperiment)
pacman::p_load(Rsamtools)
pacman::p_load(GenomicFeatures)
pacman::p_load(GenomicAlignments)
pacman::p_load(edgeR)
pacman::p_load(ReportingTools)
pacman::p_load(franciscomartinez)
foutput1 = 'PRJNA601724_Ecoli_Chryseo.report'
htmlRep1 = HTMLReport(shortName = foutput, title = foutput, reportDirectory = './reports')
htmlRep1 = HTMLReport(shortName = foutput1, title = foutput1, reportDirectory = './reports')
publish(final1,htmlRep1)
finish(htmlRep1)
# 2. E.coli - Comamonas:
foutput2 = 'PRJNA601724_Ecoli_Comam.report'
htmlRep2 = HTMLReport(shortName = foutput2, title = foutput2, reportDirectory = './reports')
publish(final2,htmlRep1)
finish(htmlRep2)
# 1. E.coli - Chryseobacterium:
foutput1 = 'PRJNA601724_Ecoli_Chryseo.report'
htmlRep1 = HTMLReport(shortName = foutput1, title = foutput1, reportDirectory = './reports')
publish(final1,htmlRep1)
finish(htmlRep1)
# 2. E.coli - Comamonas:
foutput2 = 'PRJNA601724_Ecoli_Comam.report'
htmlRep2 = HTMLReport(shortName = foutput2, title = foutput2, reportDirectory = './reports')
publish(final2,htmlRep2)
finish(htmlRep2)
# 3. Chryseobacterium - Comamonas:
foutput3 = 'PRJNA601724_Chryseo_Comam.report'
htmlRep3 = HTMLReport(shortName = foutput3, title = foutput3, reportDirectory = './reports')
publish(final3,htmlRep3)
finish(htmlRep3)
# Directories.
pkg = "franciscomartinez"
version = "1.0"
dirbasepkg = "/Users/francisco/Desktop/Bioinformatica/Bioinf_Estadistica/Paquete_franciscomartinez/"
dirpkg = paste0(dirbasepkg,pkg)
dirvignettes = paste0(dirbasepkg,pkg,"-notes/vignettes/")
pkgtar = paste0(pkg,"_",version,".tar.gz")
# Package building.
pacman::p_load(devtools,Rcpp,pkgdown)
setwd(dirbasepkg)
devtools::document(pkg) # Generate documentation 'man'.
devtools::check(pkg) # Check possible errors.
devtools::check(pkg) # Check possible errors.
pacman::p_load(SummarizedExperiment)
x = apply(assay(se),1,sum)
summary(x)
# Packages
library(Biobase)
library(GEOquery)
library(affy)
library(genefilter)
library(limma)
library(SummarizedExperiment)
library(edgeR)
library(GSEABase)
library(EnrichmentBrowser)
library(tami)
devtools::check(pkg) # Check possible errors.
devtools::check(pkg) # Check possible errors.
## Vignettes.
setwd("/Users/francisco/Desktop/Bioinformatica/Bioinf_Estadistica/Paquete_franciscomartinez/franciscomartinez/vignettes")
pacman::p_load(devtools,knitr,rmarkdown)
formatos=c("html_document","pdf_document")
render("T1_Microarray.Rmd",output_format=formatos)
render("T2_ExprDiferencial.Rmd",output_format=formatos)
render("T3_RNAseq.Rmd",output_format=formatos)
devtools::check(pkg) # Check possible errors.
# Generate html.
setwd(dirpkg)
pkgdown::build_site() # Creates 'docs' directory.
