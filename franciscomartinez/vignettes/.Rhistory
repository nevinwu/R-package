pacman::p_load(GEOquery)
pacman::p_load(ArrayExpress)
pacman::p_load(affy)
pacman::p_load(affyPLM)
pacman::p_load(geneplotter)
pacman::p_load(AnnotationDbi)
data("gse69762", package = "franciscomartinez")
View(gse69762)
experimentData(gse69762)
data("gse69762", package = "franciscomartinez")
pData(gse69762)
tt = genefilter::rowttests(gse69762, pData(gse69762)[,"type"])
tt
tt = genefilter::rowttests(gse69762, pData(gse69762)[,"type"])
head(tt)
table(tt[,"p.value"] < 0.05)
p0 = tt[,"p.value"]
p0 = tt[,"p.value"]
p.BH = p.adjust(p0, method = "BH")
new_tt = data.frame(tt,p.BH)
new_tt
head(new_tt)
p.BH = p.adjust(p0, method = "bonferroni")
new_tt = data.frame(tt,p.BH)
head(new_tt)
p.bonferroni = p.adjust(p0, method = "bonferroni")
new_tt = data.frame(tt,p.BH)
head(new_tt)
# Para una primera ejecución o una ejecución completa del código se recomienda cambiar todos los valores por 'TRUE'. Al lado de cada etiqueta se ha indicado para qué se ha utilizado ese nivel de ejecución (generalmente):
doBasics=FALSE # Cargar datos y su procesado básico.
doAll=FALSE # Obtención de figuras y tablas.
doNot=FALSE # Descargar datos y guardarlos. También utilización de funciones básicas para ilustrar cierta información.
pacman::p_load(Biobase)
pacman::p_load(GEOquery)
pacman::p_load(ArrayExpress)
pacman::p_load(affy)
pacman::p_load(affyPLM)
pacman::p_load(geneplotter)
pacman::p_load(AnnotationDbi)
tt = genefilter::rowttests(gse69762, pData(gse69762)[,"type"])
head(tt)
table(tt[,"p.value"] < 0.05)
p0 = tt[,"p.value"]
p.bonferroni = p.adjust(p0, method = "bonferroni")
new_tt = data.frame(tt,p.BH)
head(new_tt)
# Para una primera ejecución o una ejecución completa del código se recomienda cambiar todos los valores por 'TRUE'. Al lado de cada etiqueta se ha indicado para qué se ha utilizado ese nivel de ejecución (generalmente):
doBasics=FALSE # Cargar datos y su procesado básico.
doAll=FALSE # Obtención de figuras y tablas.
doNot=FALSE # Descargar datos y guardarlos. También utilización de funciones básicas para ilustrar cierta información.
pacman::p_load(Biobase)
pacman::p_load(GEOquery)
pacman::p_load(ArrayExpress)
pacman::p_load(affy)
pacman::p_load(affyPLM)
pacman::p_load(geneplotter)
pacman::p_load(AnnotationDbi)
data("gse69762", package = "franciscomartinez")
tt = genefilter::rowttests(gse69762, pData(gse69762)[,"type"])
head(tt)
table(tt[,"p.value"] < 0.05)
p0 = tt[,"p.value"]
p.bonferroni = p.adjust(p0, method = "bonferroni")
new_tt = data.frame(tt,p.BH)
p0 = tt[,"p.value"]
p.bonferroni = p.adjust(p0, method = "bonferroni")
new_tt = data.frame(tt,p.bonferroni)
head(new_tt)
significativos.BH = which(p.bonferroni < 0.05)
significativos.BH
new_tt[significativos.BH]
new_tt[significativos.BH,]
significativos.p0 = which(p0 < 0.05)
length(significativos.p0)
length(significativos.BH)
# Para una primera ejecución o una ejecución completa del código se recomienda cambiar todos los valores por 'TRUE'. Al lado de cada etiqueta se ha indicado para qué se ha utilizado ese nivel de ejecución (generalmente):
doBasics=FALSE # Cargar datos y su procesado básico.
doAll=FALSE # Obtención de figuras y tablas.
doNot=FALSE # Descargar datos y guardarlos. También utilización de funciones básicas para ilustrar cierta información.
pacman::p_load(Biobase)
pacman::p_load(GEOquery)
pacman::p_load(ArrayExpress)
pacman::p_load(affy)
pacman::p_load(affyPLM)
pacman::p_load(geneplotter)
pacman::p_load(AnnotationDbi)
data("gse69762", package = "franciscomartinez")
tt = genefilter::rowttests(gse69762, pData(gse69762)[,"type"])
head(tt)
table(tt[,"p.value"] < 0.05)
p0 = tt[,"p.value"]
p.bonferroni = p.adjust(p0, method = "bonferroni")
new_tt = data.frame(tt,p.bonferroni)
head(new_tt)
significativos.BH = which(p.bonferroni < 0.05)
head(new_tt[significativos.bonferroni,])
# Para una primera ejecución o una ejecución completa del código se recomienda cambiar todos los valores por 'TRUE'. Al lado de cada etiqueta se ha indicado para qué se ha utilizado ese nivel de ejecución (generalmente):
doBasics=FALSE # Cargar datos y su procesado básico.
doAll=FALSE # Obtención de figuras y tablas.
doNot=FALSE # Descargar datos y guardarlos. También utilización de funciones básicas para ilustrar cierta información.
pacman::p_load(Biobase)
pacman::p_load(GEOquery)
pacman::p_load(ArrayExpress)
pacman::p_load(affy)
pacman::p_load(affyPLM)
pacman::p_load(geneplotter)
pacman::p_load(AnnotationDbi)
data("gse69762", package = "franciscomartinez")
tt = genefilter::rowttests(gse69762, pData(gse69762)[,"type"])
head(tt)
table(tt[,"p.value"] < 0.05)
p0 = tt[,"p.value"]
p.bonferroni = p.adjust(p0, method = "bonferroni")
new_tt = data.frame(tt,p.bonferroni)
head(new_tt)
significativos.bonferroni = which(p.bonferroni < 0.05)
head(new_tt[significativos.bonferroni,])
significativos.p0 = which(p0 < 0.05)
length(significativos.p0)
length(significativos.bonferroni)
p0 = tt[,"p.value"]
p.BH = p.adjust(p0, method = "BH")
new_tt = data.frame(tt, p.bonferroni, p.BH)
head(new_tt)
significativos.BH = which(p.BH < 0.05)
head(new_tt[significativos.BH,])
length(significativos.p0)
length(significativos.bonferroni)
length(significativos.BH)
length(significativos.p0)
length(significativos.bonferroni)
length(significativos.BH)
View(new_tt)
tail(new_tt)
pData(gse69762)
pData(gse69762)[,'type']
dessign = model.matrix(~ pData(gse69762)[,'type']) # variable respuesta (se omite, es cada una de las filas de la matriz de expresión) ~ covariable (variable con efecto principal, variable fenotípica)
dessign = model.matrix(~ pData(gse69762)[,'type']) # variable respuesta (se omite, es cada una de las filas de la matriz de expresión) ~ covariable (variable con efecto principal, variable fenotípica).
colnames(dessign) = c('intercept', 'type') # 'intercept' sería ß0 (ordenada en el origen), mientras que 'type' sería ß1.
head(dessign)
fit = lmFit(gse69762,dessign)
fit = lmFit(gse69762,dessign)
fit = limma::lmFit(gse69762,dessign)
head(fit)
head(fit$coefficients)
new_fit = eBayes(fit)
new_fit = limma::eBayes(fit)
new_fit = limma::eBayes(fit)
limma::topTable(new_fit, coef = 2, adjust = 'BH')
all = limma::topTable(new_fit, coef = 2, adjust = 'BH')
all
class(all)
all
View(all)
new_fit
View(new_fit)
new_fit$coefficients
all = limma::table(new_fit, coef = 2, adjust = 'BH') # Contendrá todos los genes (ya que trabaja sobre la matriz de expresión), incluso aquellos que no fueron anotados con sus correspondientes id Entrez y Ensembl.
topT
all = limma::topTable(new_fit, coef = 2, adjust = 'BH') # Contendrá todos los genes (ya que trabaja sobre la matriz de expresión), incluso aquellos que no fueron anotados con sus correspondientes id Entrez y Ensembl.
all
pData(gse69762)
fData(gse69762)
pData(gse69762)
names(pData(gse69762))
pData(gse69762)
head(dessing)
head(dessign)
fit
names(fit)
head(fit$coefficients) # Se puede ver de nuevo ß0 ('intercept') y ß1 ('type').
dim(fit$coefficients) # Se puede ver de nuevo ß0 ('intercept') y ß1 ('type').
head(fit$coefficients) # Se puede ver de nuevo ß0 ('intercept') y ß1 ('type').
View(gse69762)
View(all)
View(new_fit)
all = limma::topTable(na.omit(new_fit), coef = 2, adjust = 'BH') # Contendrá todos los genes (ya que trabaja sobre la matriz de expresión), incluso aquellos que no fueron anotados con sus correspondientes id Entrez y Ensembl.
all
all = limma::topTable(na.omit(new_fit), coef = 2, adjust = 'BH') # Contendrá todos los genes (ya que trabaja sobre la matriz de expresión), incluso aquellos que no fueron anotados con sus correspondientes id Entrez y Ensembl.
all
na.omit(all)
all
all = limma::topTable(complete.cases(new_fit), coef = 2, adjust = 'BH') # Contendrá todos los genes (ya que trabaja sobre la matriz de expresión), incluso aquellos que no fueron anotados con sus correspondientes id Entrez y Ensembl.
all = limma::topTable(new_fit, coef = 2, adjust = 'BH') # Contendrá todos los genes (ya que trabaja sobre la matriz de expresión), incluso aquellos que no fueron anotados con sus correspondientes id Entrez y Ensembl.
all
pacman::p_load(Biobase)
pacman::p_load(affy)
pacman::p_load(genefilter)
pacman::p_load(limma)
data('gse69762', package = 'franciscomartinez')
tt = genefilter::rowttests(gse69762, pData(gse69762)[,'type'])
head(tt)
pacman::p_load(ReportingTools)
p0 = tt[,'p.value']
p.bonferroni = p.adjust(p0, method = 'bonferroni')
new_tt = data.frame(tt,p.bonferroni)
head(new_tt)
View(new_tt)
View(new_tt)
# Para una primera ejecución o una ejecución completa del código se recomienda cambiar todos los valores por 'TRUE'. Al lado de cada etiqueta se ha indicado para qué se ha utilizado ese nivel de ejecución de una forma general:
doBasics=FALSE # Cargar datos y su procesado básico.
doAll=FALSE # Obtención de figuras y tablas.
doNot=FALSE # Descargar datos y guardarlos. También utilización de funciones básicas para ilustrar cierta información.
pacman::p_load(Biobase)
pacman::p_load(affy)
pacman::p_load(genefilter)
pacman::p_load(limma)
pacman::p_load(ReportingTools)
data('gse69762', package = 'franciscomartinez')
tt = genefilter::rowttests(gse69762, pData(gse69762)[,'type'])
table(tt[,'p.value'] < 0.05)
p0 = tt[,'p.value']
p.bonferroni = p.adjust(p0, method = 'bonferroni')
new_tt = data.frame(tt,p.bonferroni)
significativos.bonferroni = which(p.bonferroni < 0.05)
significativos.p0 = which(p0 < 0.05)
length(significativos.p0)
length(significativos.bonferroni)
p0 = tt[,'p.value']
p.BH = p.adjust(p0, method = 'BH')
new_tt = data.frame(tt, p.bonferroni, p.BH)
View(new_tt)
head(tt)
new_tt = data.frame(tt,p.bonferroni)
head(new_tt)
head(new_tt[significativos.bonferroni,])
length(significativos.bonferroni)
head(new_tt)
# Para una primera ejecución o una ejecución completa del código se recomienda cambiar todos los valores por 'TRUE'. Al lado de cada etiqueta se ha indicado para qué se ha utilizado ese nivel de ejecución de una forma general:
doBasics=FALSE # Cargar datos y su procesado básico.
doAll=FALSE # Obtención de figuras y tablas.
doNot=FALSE # Descargar datos y guardarlos. También utilización de funciones básicas para ilustrar cierta información.
pacman::p_load(Biobase)
pacman::p_load(affy)
pacman::p_load(genefilter)
pacman::p_load(limma)
pacman::p_load(ReportingTools)
data('gse69762', package = 'franciscomartinez')
tt = genefilter::rowttests(gse69762, pData(gse69762)[,'type'])
head(tt)
table(tt[,'p.value'] < 0.05)
p0 = tt[,'p.value']
p.bonferroni = p.adjust(p0, method = 'bonferroni')
new_tt = data.frame(tt,p.bonferroni)
head(new_tt)
significativos.bonferroni = which(p.bonferroni < 0.05)
head(new_tt[significativos.bonferroni,])
significativos.p0 = which(p0 < 0.05)
length(significativos.p0)
length(significativos.bonferroni)
p0 = tt[,'p.value']
p.BH = p.adjust(p0, method = 'BH')
new_tt = data.frame(tt, p.bonferroni, p.BH)
head(new_tt)
significativos.BH = which(p.BH < 0.05)
head(new_tt[significativos.BH,])
length(significativos.p0)
length(significativos.bonferroni)
length(significativos.BH)
pData(gse69762)[,'type']
dessign = model.matrix(~ pData(gse69762)[,'type']) # variable respuesta (se omite, es cada una de las filas de la matriz de expresión) ~ covariable (variable con efecto principal, variable fenotípica).
colnames(dessign) = c('intercept', 'type') # 'intercept' sería ß0 (ordenada en el origen), mientras que 'type' sería ß1.
head(dessign)
fit = limma::lmFit(gse69762,dessign)
head(fit$coefficients) # Se puede ver de nuevo ß0 ('intercept') y ß1 ('type').
new_fit = limma::eBayes(fit)
all = limma::topTable(new_fit, coef = 2, adjust = 'BH') # Contendrá todos los genes (ya que trabaja sobre la matriz de expresión), incluso aquellos que no fueron anotados con sus correspondientes id Entrez y Ensembl.
all
pData(gse69762)
fData(gse69762)
all = limma::topTable(new_fit, coef = 2, adjust = 'BH', adjust = 'bonferroni') # Contendrá todos los genes (ya que trabaja sobre la matriz de expresión), incluso aquellos que no fueron anotados con sus correspondientes id Entrez y Ensembl.
all = limma::topTable(new_fit, coef = 2, adjust = 'BH') # Contendrá todos los genes (ya que trabaja sobre la matriz de expresión), incluso aquellos que no fueron anotados con sus correspondientes id Entrez y Ensembl.
all
all = limma::topTable(new_fit, coef = 2, adjust = c('BH', 'bonferroni')) # Contendrá todos los genes (ya que trabaja sobre la matriz de expresión), incluso aquellos que no fueron anotados con sus correspondientes id Entrez y Ensembl.
all = limma::topTable(new_fit, coef = 2, adjust = 'BH') # Contendrá todos los genes (ya que trabaja sobre la matriz de expresión), incluso aquellos que no fueron anotados con sus correspondientes id Entrez y Ensembl.
all
all = limma::topTable(new_fit, coef = 2, adjust = 'bonferroni') # Contendrá todos los genes (ya que trabaja sobre la matriz de expresión), incluso aquellos que no fueron anotados con sus correspondientes id Entrez y Ensembl.
all
all = limma::topTable(new_fit, coef = 2, adjust = 'bonferroni') # Contendrá todos los genes (ya que trabaja sobre la matriz de expresión), incluso aquellos que no fueron anotados con sus correspondientes id Entrez y Ensembl.
all
all = limma::topTable(new_fit, coef = 2, adjust = 'BH') # Contendrá todos los genes (ya que trabaja sobre la matriz de expresión), incluso aquellos que no fueron anotados con sus correspondientes id Entrez y Ensembl.
all
# Para una primera ejecución, una ejecución completa del código, o en caso de no haber instalado el paquete se recomienda cambiar todos los valores por 'TRUE'. Al lado de cada etiqueta se ha indicado para qué se ha utilizado ese nivel de ejecución (generalmente):
doBasics = FALSE # Cargar datos y su procesado básico.
doAll = FALSE # Obtención de figuras y tablas.
doNot = FALSE # Descargar datos y guardarlos. También utilización de funciones básicas para ilustrar cierta información.
pacman::p_load(Biobase)
pacman::p_load(GEOquery)
pacman::p_load(ArrayExpress)
pacman::p_load(affy)
pacman::p_load(affyPLM)
pacman::p_load(geneplotter)
pacman::p_load(AnnotationDbi)
getGEOSuppFiles("GSE69762")
system("tar xvf GSE69762/GSE69762_RAW.tar")
gse69762raw  = ReadAffy()
system("rm -fr GSE69762")
system("rm *CEL.gz")
class(gse69762raw)
dim(exprs(gse69762raw))
affy::MAplot(gse69762raw,type="pm",plot.method="smoothScatter")
affy::hist(gse69762raw)
affy::boxplot(gse69762raw)
gse69762 = affy::rma(gse69762raw)
affy::MAplot(gse69762,plot.method="smoothScatter") # Recordar: necesitamos cargar paquete affyPLM.
geneplotter::multidensity(exprs(gse69762),legend=FALSE) # Omitimos la leyenda para poder observar toda la gráfica (además, no nos es de interés).
graphics::boxplot(exprs(gse69762))
# En primer lugar, los factores (0 para los controles, 1 para los enfermos):
f1 = rep.int(0,4)
f2 = rep.int(1,5)
f3 = rep.int(0,4)
f4 = rep.int(1,4)
f5 = rep.int(0,6)
f6 = rep.int(1,7)
factores = c(f1,f2,f3,f4,f5,f6)
type = factor(factores, levels=0:1, labels=c("CONTROL","CD"))
infor_fenotip = data.frame(pData(gse69762),type)
pData(gse69762) = infor_fenotip
pData(gse69762)
annotation(gse69762)
pacman::p_load(hugene10sttranscriptcluster.db)
keytypes(hugene10sttranscriptcluster.db)
probeInfo = AnnotationDbi::select(hugene10sttranscriptcluster.db,keys=featureNames(gse69762),columns=c("ENTREZID","ENSEMBL","SYMBOL"),keytype="PROBEID")
posiciones = match(unique(probeInfo[,1]),probeInfo[,1]) # Para PROBEID
probeInfo = probeInfo[posiciones,]
posiciones = match(unique(probeInfo[,2]),probeInfo[,2]) # Para ENTREZ
probeInfo = probeInfo[posiciones,]
probeInfo = probeInfo[!is.na(probeInfo[,"ENTREZID"]),]
probeInfo = na.omit(probeInfo)
fData(gse69762) = probeInfo
fData(gse69762)
infoData = new('MIAME',
name='Hayashi et al.',
lab='Not Specified',
contact ='Kiichiro Tsuchiya <m.kool@dkfz.de>',
title = ' 	Gene expression of human small intestine generated by biopsy specimens',
abstract = 'Summary: The entire small intestine was obseved by balloon endoscopy. Biopsy specimens were taken from jejunum, ileum and colon, respectively. Overall design: Four crohn disease patients and four nonIBD controls were compared.',
url = 'https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE69762')
experimentData(gse69762) = infoData
save(gse69762,file="../data/gse69762.rda")
# Directories.
pkg = "franciscomartinez"
version = "0.2"
dirbasepkg = "/Users/francisco/Desktop/Bioinformatica/Bioinf_Estadistica/Paquete_franciscomartinez/"
dirpkg = paste0(dirbasepkg,pkg)
dirvignettes = paste0(dirbasepkg,pkg,"-notes/vignettes/")
pkgtar = paste0(pkg,"_",version,".tar.gz")
# Package building.
pacman::p_load(devtools,Rcpp,pkgdown)
setwd(dirbasepkg)
devtools::document(pkg) # Generate documentation 'man'.
devtools::check(pkg) # Check possible errors.
# Build.
## devtools::build(pkg)
system(paste0("R CMD build --resave-data ",pkg)) # Como se haría en línea de comandos, --resave-data: argumento para comprimir un poco más el fichero de datos
# Install.
install.packages(paste0(pkg,"_",version,".tar.gz"),repos=NULL,source=TRUE)
# Build.
## devtools::build(pkg)
system(paste0("R CMD build --resave-data ",pkg)) # Como se haría en línea de comandos, --resave-data: argumento para comprimir un poco más el fichero de datos
# Build.
devtools::build(pkg)
install.packages(paste0(pkg,"_",version,".tar.gz"),repos=NULL,source=TRUE)
# Directories.
pkg = "franciscomartinez"
version = "0.1"
# Install.
install.packages(paste0(pkg,"_",version,".tar.gz"),repos=NULL,source=TRUE)
# Generate html.
library(franciscomartinez)
setwd(dirpkg)
pkgdown::build_site() # Creates 'docs' directory.
## Vignettes.
setwd("/Users/francisco/Desktop/Bioinformatica/Bioinf_Estadistica/Paquete_franciscomartinez/franciscomartinez/vignettes")
pacman::p_load(devtools,knitr,rmarkdown)
## Vignettes.
setwd("/Users/francisco/Desktop/Bioinformatica/Bioinf_Estadistica/Paquete_franciscomartinez/franciscomartinez/vignettes")
pacman::p_load(devtools,knitr,rmarkdown)
formatos=c("html_document","pdf_document")
render("T1_Microarray.Rmd",output_format=formatos)
render("T2_ExprDiferencial.Rmd",output_format=formatos)
## Vignettes.
setwd("/Users/francisco/Desktop/Bioinformatica/Bioinf_Estadistica/Paquete_franciscomartinez/franciscomartinez/vignettes")
pacman::p_load(devtools,knitr,rmarkdown)
formatos=c("html_document","pdf_document")
render("T1_Microarray.Rmd",output_format=formatos)
render("T2_ExprDiferencial.Rmd",output_format=formatos)
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
--all
tinytex::tlmgr_update()
all
render("T2_ExprDiferencial.Rmd",output_format=formatos)
render("T2_ExprDiferencial.Rmd",output_format=formatos)
help.start()
# Generate html.
library(franciscomartinez)
help.start()
help.start()
??franciscomartinez
setwd('/Users/francisco/Desktop/Bioinformatica/Bioinf_Estadistica/T3_RNAseq')
load('PRJNA601724.rda')
setwd('/Users/francisco/Desktop/Bioinformatica/Bioinf_Estadistica/Paquete_franciscomartinez/franciscomartinez/data/')
load('PRJNA601724.rda')
load('/Users/francisco/Desktop/Bioinformatica/Bioinf_Estadistica/Paquete_franciscomartinez/franciscomartinez/data/PRJNA601724.rda')
pacman::p_load(Biobase)
pacman::p_load(SummarizedExperiment)
pacman::p_load(Rsamtools)
pacman::p_load(GenomicFeatures)
pacman::p_load(GenomicAlignments)
assay(PRJNA601724)
colData(PRJNA601724)
colData(PRJNA601724)[,"Treatment"]
rowRanges(PRJNA601724)
rowData(PRJNA601724)
assay(PRJNA601724) # Matriz de conteos
colData(PRJNA601724)
colData(PRJNA601724)[,"Treatment"]
colData(PRJNA601724)
colnames(PRJNA601724)
Run = c("SRR10902994","SRR10902995","SRR10902996","SRR10902997","SRR10902998","SRR10902999",
"SRR10903000","SRR10903001","SRR10903002")
colnames(PRJNA601724) = Run
assay(PRJNA601724) # Matriz de conteos
save(PRJNA601724,file="PRJNA601724.rda")
# Para una primera ejecución, una ejecución completa del código, o en caso de no haber instalado el paquete se recomienda cambiar todos los valores por 'TRUE'. Al lado de cada etiqueta se ha indicado para qué se ha utilizado ese nivel de ejecución (generalmente):
doBasics = FALSE # Cargar datos y su procesado básico.
doAll = FALSE # Obtención de figuras y tablas.
doNot = FALSE # En esta ocasión, se utilizará para ilustrar el código utilizado para obtener el objeto RangedSummarizedExperiment (matriz de conteor) y, por tanto, no debe utilizarse.
pacman::p_load(Biobase)
pacman::p_load(SummarizedExperiment)
pacman::p_load(Rsamtools)
pacman::p_load(GenomicFeatures)
pacman::p_load(GenomicAlignments)
load('/Users/francisco/Desktop/Bioinformatica/Bioinf_Estadistica/Paquete_franciscomartinez/franciscomartinez/data/PRJNA601724.rda')
assay(PRJNA601724) # Matriz de conteos
colData(PRJNA601724)
colData(PRJNA601724)
colData(PRJNA601724)
colData(PRJNA601724)[,"Treatment"]
colData(PRJNA601724) # Datos fenotípicos
dim(PRJNA601724)
assay(PRJNA601724) # Matriz de conteos
assay(PRJNA601724) # Matriz de conteos
colData(PRJNA601724) # Datos fenotípicos
colData(PRJNA601724) # Datos fenotípicos
rowData(PRJNA601724)
rownames(PRJNA601724)
rowRanges(PRJNA601724)
load('../franciscomartinez/data/PRJNA601724.rda')
load('../data/PRJNA601724.rda')
dim(PRJNA601724)
assay(PRJNA601724) # Matriz de conteos
colData(PRJNA601724) # Datos fenotípicos
experimentData(PRJNA601724)
dim(which(assay(PRJNA601724) > 0))
x = apply(assay(PPRJNA601724),1,sum)
x = apply(assay(PRJNA601724),1,sum)
dim(PRJNA601724)
colData(PRJNA601724) # Datos fenotípicos
rownames(PRJNA601724) # Nombre de los genes
rowRanges(PRJNA601724) # Información sobre la secuenciación (sobre las reads)
rowData(PRJNA601724)
summary(x)
sum(x == 0)
PRJNA601724[which(x > 10),]
PRJNA601724[which(x > 0),]
dim(PRJNA601724[which(x > 0),])
dim(PRJNA601724[which(x > 0),])
se0
se0 = PRJNA601724[which(x > 0),] # Se quitan aquellas que en el total de las 9 muestras tienen 0 reads
dim(PRJNA601724[which(x > 0),]) # Nos quedamos con 23.548 genes
se0
load('../data/PRJNA601724.rda')
se = PRJNA601724
dim(se)
assay(se) # Matriz de conteos
colData(se) # Datos fenotípicos
rownames(se) # Nombre de los genes
rowRanges(se) # Información sobre la secuenciación (sobre las reads)
rowData(se)
x = apply(assay(se),1,sum)
summary(x)
sum(x == 0) # 23.200 genes no tienen ninguna lectura.
se0 = se[which(x > 0),] # Se quitan aquellas que en el total de las 9 muestras tienen 0 reads
dim(se[which(x > 0),]) # Nos quedamos con 23.548 genes
se0
y = apply(assay(se),2,sum)
y
summary(y)
pacman::p_load(edgeR)
colData(se) # Datos fenotípicos
dge = DGEList(counts = assay(PRJNA601724), group = colData(PRJNA601724)[,"Treatment"])
dge.c = estimateCommonDisp(dge) # Se estima la dispersión común
dge.c$common.dispersion
dge.t = estimateTagwiseDisp(dge.c) # Se estima dispersión por gen
dge.t$tagwise.dispersion
et.c = exactTest(dge.c)
et.t = exactTest(dge.t)
# 1. E.coli - Chryseobacterium
dge1 = DGEList(counts = assay(PRJNA601724), group = colData(PRJNA601724)[1:6,"Treatment"])
View(dge)
View(dge)
topTags(et.c)
topTags(et.t)
View(PRJNA601724)
PRJNA601724
assay(PRJNA601724)[colnames(PRJNA601724) == "E.coli"]
topTags(et.t)
topTags(et.t)
topTags(et.c)
topTags(et.t)
